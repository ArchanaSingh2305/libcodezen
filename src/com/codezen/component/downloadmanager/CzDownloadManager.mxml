<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300"
			   initialize="{initDownload()}">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		/* FONTS HERE */
		@font-face{
			src: url("assets/Guifx.ttf");
			fontFamily: Guifx;
			advancedAntiAliasing: true;
		}
		
		.guiControl{
			font-family: Guifx;
			font-size: 24;
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.codezen.helper.Worker;
			import com.codezen.util.DownloadHelper;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			// download state
			[Bindable]
			private var isDownloading:Boolean = false;
			
			// download queue
			[Bindable]
			private var downloadQueue:ArrayCollection;
			
			// download manager
			private var downloadHelper:DownloadHelper;
			
			/**
			 * Initializes download manager 
			 * 
			 */
			private function initDownload():void{
				// init queue
				downloadQueue = new ArrayCollection();
				// init manager
				downloadHelper = new DownloadHelper();
				
				// add event listeners
				downloadHelper.addEventListener(Event.COMPLETE, onDownloadComplete);
				downloadHelper.addEventListener(ProgressEvent.PROGRESS, onDownloadProgress);
				downloadHelper.addEventListener(Worker.ERROR, onDownloadError);
			}
			
			/**
			 * 
			 * @param url (String) Link of file for download
			 * 
			 */
			public function addFile(name:String, url:String, label:String):void{
				downloadQueue.addItem({name: name, url:url, label: label});
			}
			
			/**
			 * 
			 * @param event
			 * 
			 * Called on file download complete
			 */
			private function onDownloadComplete(event:Event):void{
				// remove downloaded from queue
				downloadQueue.removeItemAt(0);
				// set progress bar
				download_bar.setProgress(0,100);
				download_bar.label = "Пока ничего не качаем";
				// continue download
				startDownload();
			}
			
			/**
			 * 
			 * @param event
			 * 
			 * Called on download progress
			 */
			private function onDownloadProgress(event:ProgressEvent):void {
				// get loaded value
				var value:Number = event.bytesLoaded;
				// get total value
				var total:Number = event.bytesTotal;
				// calculate precent
				var precent:Number = Math.round(value*100/total);
				// status string
				var statusstr:String;
				
				// set min-max
				if (download_bar.minimum == 0){
					download_bar.minimum = value;
					download_bar.maximum = total;
				}
				
				// set status
				/*statusstr = downloadQueue[0].title; 
				if (statusstr.length>100) statusstr = statusstr.substr(0,100)+'.. '; */
				
				// set progress
				download_bar.label = "Загружено "+precent+"%";
				download_bar.setProgress(value, total);
			}
			
			/**
			 * 
			 * @param e
			 * 
			 * Called on download error (link not found)
			 */
			private function onDownloadError(e:Event):void{
				// cancel current dl
				downloadHelper.cancelDownload();
				// set state
				Alert.show("Произошла ошибка при загрузке файла.", "Ошибка!");
			}
			
			
			/**
			 * Starts downloading 
			 * 
			 */
			private function startDownload():void{
				// check if is end
				if(downloadQueue.length < 1){
					// show bubble
					start_down.text = '1';
					start_down.toolTip = 'Начать запланированные загрузки';
					isDownloading = false;
					return;
				}
				
				// set state
				download_bar.label = "Начинаем загрузку..";
				start_down.text = '3';
				start_down.toolTip = 'Отменить загрузку';
				isDownloading = true;
				// do download
				downloadHelper.downloadFileFromServer(downloadQueue[0].name, downloadQueue[0].url);
			}
			
			/** 
			 * Cancel download
			 */
			private function cancelDownload():void{
				// set progress bar
				download_bar.setProgress(0,100);
				download_bar.label = "Пока ничего не качаем";
				// cancel download
				downloadHelper.cancelDownload();
				// set gui
				start_down.text = '1';
				start_down.toolTip = 'Начать запланированные загрузки';
				isDownloading = false;
			}

			private function start_down_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if(!isDownloading){
					// set gui
					start_down.text = '3';
					start_down.toolTip = 'Отменить загрузку';
					// start
					startDownload();
				}else{
					// set gui
					start_down.text = '1';
					start_down.toolTip = 'Начать запланированные загрузки';
					// vancel
					cancelDownload();
				}
				isDownloading = !isDownloading;
			}


			private function clear_down_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				cancelDownload();
				// init queue
				downloadQueue = new ArrayCollection();
			}

		]]>
	</fx:Script>
	<mx:ProgressBar y="5" labelPlacement="center" fontFamily="Verdana" minimum="0" maximum="100" 
					id="download_bar" label="Ничего не загружается.." mode="manual" right="35" left="30"/>
	<s:Label text="1" styleName="guiControl" left="10" top="5" buttonMode="true" useHandCursor="true"
			 id="start_down" toolTip="Начать запланированные загрузки" 
			 mouseOver="{start_down.setStyle('color','#446CE3')}" 
			 mouseOut="{start_down.setStyle('color','#000000')}"
			 mouseDown="{start_down.setStyle('color','#000000')}"
			 click="start_down_clickHandler(event)"/>
	<s:Label text="x" styleName="guiControl" top="5" right="10" buttonMode="true" useHandCursor="true"
			 id="clear_down" toolTip="Отменить все загрузки" 
			 mouseOver="{clear_down.setStyle('color','#446CE3')}" 
			 mouseOut="{clear_down.setStyle('color','#000000')}"
			 mouseDown="{clear_down.setStyle('color','#000000')}"
			 click="clear_down_clickHandler(event)"/>
	<s:List right="10" left="10" bottom="10" top="32" id="download_list" dataProvider="{downloadQueue}"></s:List>
	
	
</s:Group>
